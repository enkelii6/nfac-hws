"""
ðŸ’Ž Exercise-1: Two Sum
Write a function "two_sum(nums: list, target: int) -> tuple" that takes a list of integers
and a target integer. It should return a tuple of two indices whose elements add up to the target.
Assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
two_sum([2, 7, 11, 15], 9) -> (0, 1)
"""

def two_sum(nums: list, target: int) -> tuple:
    seen = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in seen:
            return seen[complement], i
        seen[num] = i

"""
ðŸ’Ž Exercise-2: Isomorphic Strings
Write a function "is_isomorphic(s: str, t: str) -> bool" that takes two strings s and t
and determines if they are isomorphic. Two strings s and t are isomorphic if the characters
in s can be replaced to get t, and all characters in s map to exactly one character in t and vice versa.

Example:
is_isomorphic('egg', 'add') -> True
"""

def is_isomorphic(s: str, t: str) -> bool:
    if len(s) != len(t):
        return False

    map_s, map_t = {}, {}
    for char_s, char_t in zip(s, t):
        if map_s.get(char_s, char_t) != char_t or map_t.get(char_t, char_s) != char_s:
            return False
        map_s[char_s] = char_t
        map_t[char_t] = char_s

    return True

"""
ðŸ’Ž Exercise-3: Check Alien Dictionary
Write a function "is_alien_sorted(words: list, order: str) -> bool" that checks if words
are sorted lexicographicaly according to a new character order provided in the string order.

Example:
is_alien_sorted(["hello","leetcode"], "hlabcdefgijkmnopqrstuvwxyz") -> True
"""

def is_alien_sorted(words: list, order: str) -> bool:
    order_map = {char: index for index, char in enumerate(order)}

    for i in range(len(words) - 1):
        for j in range(len(words[i])):
            if j >= len(words[i + 1]):
                return False
            if words[i][j] != words[i + 1][j]:
                if order_map[words[i][j]] > order_map[words[i + 1][j]]:
                    return False
                break
    return True

"""
ðŸ’Ž Exercise-4: Longest Substring Without Repeating Characters
Write a function "length_of_longest_substring(s: str) -> int" that takes a string s,
and returns the length of the longest substring without repeating characters.

Example:
length_of_longest_substring('abcabcbb') -> 3
"""

def length_of_longest_substring(s: str) -> int:
    seen = {}
    max_length, start = 0, 0

    for i, char in enumerate(s):
        if char in seen and seen[char] >= start:
            start = seen[char] + 1
        seen[char] = i
        max_length = max(max_length, i - start + 1)

    return max_length

"""
ðŸ’Ž Exercise-5: Group Shifted Strings
Write a function "group_shifted(strings: list) -> list" that takes a
list of lowercase strings and groups all strings that are generated by shifting some letters
of another string circularly. Return a list of groups, each group is a list of strings.
Groups and strings within a group can be in any order.

Example:
group_shifted(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]) -> [["abc","bcd"],["acef"],["xyz"],["az","ba"],["a","z"]]
"""

def group_shifted(strings: list) -> list:
    def get_shift_key(s):
        return tuple((ord(s[i]) - ord(s[0])) % 26 for i in range(len(s)))

    groups = {}
    for s in strings:
        key = get_shift_key(s)
        if key not in groups:
            groups[key] = []
        groups[key].append(s)

    return list(groups.values())